# .github/workflows/cicd.yml

name: To-Do App CI/CD to OCI VM

# main 브랜치에 push 이벤트가 발생했을 때 이 워크플로우를 실행합니다.
on:
  push:
    branches: [ "main" ]

# 환경 변수 설정
env:
  OCI_REGION: ${{ secrets.OCI_REGION }}
  OCIR_REPO: ${{ secrets.OCIR_TENANCY }}/todo-app # OCIR 리포지토리 경로

jobs:
  # 첫 번째 Job: Docker 이미지 빌드 및 OCIR에 푸시
  build-and-push:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest
    steps:
      # 1. 소스 코드 체크아웃
      - name: Checkout code
        uses: actions/checkout@v4

      # 2. OCI CLI 설정 (OCIR 로그인을 위해 필요)
      - name: OCI CLI Setup
        uses: oracle-actions/oci-cli-setup-action@v1.1
        with:
          auth_method: 'API_KEY'
          user: ${{ secrets.OCI_USER_OCID }}
          tenancy: ${{ secrets.OCI_TENANCY_OCID }}
          key: ${{ secrets.OCI_USER_API_KEY }}
          fingerprint: ${{ secrets.OCI_FINGERPRINT }}
          region: ${{ env.OCI_REGION }}

      # 3. OCIR에 로그인
      - name: Login to OCIR
        run: oci registry login --registry ${{ env.OCI_REGION }}.ocir.io --tenancy ${{ secrets.OCIR_TENANCY }} --auth-via-token

      # 4. Docker 이미지 빌드 및 푸시
      - name: Build and Push Image
        run: |
          docker build -t ${{ env.OCI_REGION }}.ocir.io/${{ env.OCIR_REPO }}:${{ github.sha }} ./app
          docker push ${{ env.OCI_REGION }}.ocir.io/${{ env.OCIR_REPO }}:${{ github.sha }}

  # 두 번째 Job: VM에 배포
  deploy:
    name: Deploy to OCI VM
    runs-on: ubuntu-latest
    needs: build-and-push # build-and-push Job이 성공해야 실행됩니다.
    steps:
      # 1. SSH로 원격 서버에 접속하여 배포 스크립트 실행
      - name: Deploy to VM
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.VM_PUBLIC_IP }}
          username: ${{ secrets.VM_USERNAME }}
          key: ${{ secrets.VM_SSH_PRIVATE_KEY }}
          script: |
            # 기존 앱 컨테이너가 있다면 중지하고 삭제
            if [ $(docker ps -a -q -f name=todo-app) ]; then
              docker stop todo-app
              docker rm todo-app
            fi

            # 이전에 다운로드한 이미지가 있다면 삭제 (선택 사항)
            if [ $(docker images -q ${{ env.OCI_REGION }}.ocir.io/${{ env.OCIR_REPO }}) ]; then
              docker rmi $(docker images -q ${{ env.OCI_REGION }}.ocir.io/${{ env.OCIR_REPO }})
            fi

            # OCI CLI를 사용하여 OCIR에 다시 로그인
            oci registry login --registry ${{ env.OCI_REGION }}.ocir.io --tenancy ${{ secrets.OCIR_TENANCY }} --auth-via-token

            # 최신 이미지 다운로드
            docker pull ${{ env.OCI_REGION }}.ocir.io/${{ env.OCIR_REPO }}:${{ github.sha }}

            # 최신 이미지로 컨테이너 실행
            docker run -d --name todo-app --network todo-net -p 8080:8080 --restart=always \
              -e SPRING_PROFILES_ACTIVE=prod \
              -e SPRING_DATASOURCE_URL=jdbc:mysql://mysql-db:3306/todolist?useSSL=false&serverTimezone=Asia/Seoul \
              -e SPRING_DATASOURCE_USERNAME=todo_user \
              -e SPRING_DATASOURCE_PASSWORD=todo_pass \
              ${{ env.OCI_REGION }}.ocir.io/${{ env.OCIR_REPO }}:${{ github.sha }}