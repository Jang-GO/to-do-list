name: Java CI/CD to OCI

on:
  push:
    branches: [ "main" ]

jobs:
  build-and-push:
    name: Build and Push to OCIR
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up JDK 21
        uses: actions/setup-java@v3
        with:
          java-version: '21'
          distribution: 'temurin'

      - name: Setup Gradle
        uses: gradle/gradle-build-action@v2

      - name: Log in to OCI Container Registry
        uses: docker/login-action@v2
        with:
          registry: ${{ secrets.OCIR_REGISTRY }}
          username: ${{ secrets.OCIR_NAMESPACE }}/${{ secrets.OCI_USERNAME }}
          password: ${{ secrets.OCI_AUTH_TOKEN }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v4
        with:
          context: ./app
          push: true
          tags: ${{ secrets.OCIR_REGISTRY }}/${{ secrets.OCIR_NAMESPACE }}/todo/todo-app:${{ github.sha }}

  deploy:
    name: Deploy to OCI VM
    runs-on: ubuntu-latest
    needs: build-and-push # build-and-push 작업이 성공해야만 실행됩니다. 
    steps:
      - name: Deploy to VM
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.VM_PUBLIC_IP }}
          username: ${{ secrets.VM_USERNAME }}
          key: ${{ secrets.VM_SSH_PRIVATE_KEY }}
          script: |
            # Docker가 설치되어 있는지 확인하고, 없으면 설치합니다.
            if ! command -v docker &> /dev/null; then
              echo "Docker not found, installing..."
              sudo yum install -y yum-utils
              sudo yum-config-manager --add-repo https://download.docker.com/linux/oracle/8/x86_64/stable
              sudo yum install -y docker-ce docker-ce-cli containerd.io
              sudo systemctl start docker
              sudo systemctl enable docker
              echo "Docker installed."
            fi

            # OCIR에 로그인합니다.
            sudo docker login ${{ secrets.OCIR_REGISTRY }} -u "${{ secrets.OCIR_NAMESPACE }}/${{ secrets.OCI_USERNAME }}" -p "${{ secrets.OCI_AUTH_TOKEN }}"
            
            # 최신 이미지를 내려받습니다.
            sudo docker pull ${{ secrets.OCIR_REGISTRY }}/${{ secrets.OCIR_NAMESPACE }}/todo/todo-app:${{ github.sha }}
            
            # 기존 컨테이너가 있으면 중지하고 삭제합니다.
            sudo docker stop todo-app || true
            sudo docker rm todo-app || true
            
            # 새 이미지로 컨테이너를 실행합니다.
            sudo docker run -d -p 8080:8080 --restart=always --name todo-app \
              -e SPRING_PROFILES_ACTIVE=prod \
              -e SPRING_DATASOURCE_URL=jdbc:mysql://${{ secrets.DB_ENDPOINT }}:3306/mysql?useSSL=false&serverTimezone=Asia/Seoul \
              -e SPRING_DATASOURCE_USERNAME=${{ secrets.DB_USER }} \
              -e SPRING_DATASOURCE_PASSWORD=${{ secrets.DB_ADMIN_PASSWORD }} \
              ${{ secrets.OCIR_REGISTRY }}/${{ secrets.OCIR_NAMESPACE }}/todo/todo-app:${{ github.sha }}